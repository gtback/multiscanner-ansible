---

- name: install apache
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - httpd
    - httpd-devel
  become: yes
  become_user: root

- name: create apache web service configuration directory
  file: "path={{ item }} state=directory mode=0775 owner={{ ms_user }} recurse=yes"
  with_items:
    - "{{ apache_sites_available_dir }}"
  become: yes
  become_user: root

# create enabled sites directory that links to available sites directory
- name: setup nginx sites-available symlink
  file: "path={{ apache_sites_enabled_dir }}  src={{ apache_sites_available_dir }} state=link force=yes mode=0775 owner={{ ms_user }}"
  become: yes
  become_user: root


- name: enable apache to start on boot (RHEL/CentOS 7)
  systemd:
    state: started
    enabled: yes
    name: httpd
  become: yes
  become_user: root


- name: tell apache to use sites-enabled directory
  lineinfile:
    dest: /etc/httpd/conf/httpd.conf
    line: 'IncludeOptional sites-enabled/*.conf'
  become: yes
  become_user: root
  notify:
  - restart apache

- name: run apache as ms_user (1)
  lineinfile:
    dest: /etc/httpd/conf/httpd.conf
    regexp: '^User apache$'
    backrefs: yes
    line: 'User {{ ms_user }}'
  become: yes
  become_user: root
  notify:
  - restart apache

- name: run apache as ms_user (2)
  lineinfile:
    dest: /etc/httpd/conf/httpd.conf
    regexp: '^Group apache$'
    backrefs: yes
    line: 'Group root'
  become: yes
  become_user: root
  notify:
  - restart apache

# If we include the default SSL config when using SSL, things don't work so we want to NOT load all these random configs
- name: do not load default modules under conf.d
  lineinfile:
    path: /etc/httpd/conf/httpd.conf
    state: absent
    regexp: '^IncludeOptional\s+conf\.d/\*\.conf'
  become: yes
  become_user: root
  notify:
  - restart apache

#----------- SE Linux Stuff ------------
- name: selinux-allow apache processes to connect to external services
  command: "setsebool -P httpd_can_network_connect on"
  become: yes
  become_user: root

- name: copy selinux TE file
  template: src=mscan_httpd.te.j2 dest=/tmp/mscan_httpd.te mode=755 owner=root group=root
  become: yes
  become_user: root

- name: install policycoreutils-python
  yum:
    name: policycoreutils-python
    state: present
  become: yes
  become_user: root

- name: create SELinux policy
  semodule:
    te_file: /tmp/mscan_httpd.te
    module_name: mscan_httpd
    module_version: 1.0
  become: yes
  become_user: root

#----------- Set groundwork for SSL if user wants it -----------
- name: DEBUG-is web ssl enabled
  debug: var=servers_use_ssl

- include: setup_for_ssl.yml
  when: servers_use_ssl|bool == True